---
swagger: "2.0"
info:
  description: "Ecomm App API"
  version: "1.0.0"
  title: "Ecomm App Food"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v2"
tags:
- name: "store"
  description: "Operations regarding store"
- name: "item"
  description: "Operations about item"
schemes:
- "http"
paths:
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns inventory"
      description: "Returns list of all items in the store"
      operationId: "get_inventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      x-swagger-router-controller: "swagger_server.controllers.store_controller"
  /item/{itemId}:
    get:
      tags:
      - "item"
      summary: "Returns Item info"
      description: "Returns info of an item in the store"
      operationId: "get_item"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of the item that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10
        minimum: 1
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Item"
      x-swagger-router-controller: "swagger_server.controllers.item_controller"
  /item:
    post:
      tags:
      - "item"
      summary: "Add a new item to the store"
      description: ""
      operationId: "add_item"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Item that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        "200":
          description: "successful operation"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "item"
      summary: "Update an existing item"
      description: ""
      operationId: "update_item"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Item object that needs to be updated in the store"
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Item not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "item"
      summary: "Delete item by ID"
      description: "For valid response try integer IDs with positive integer value.\
        \         Negative or non-integer values will generate API errors"
      operationId: "delete_item"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of the item that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
      responses:
        "200":
          description: "successfully deleted the item"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Item not found"
      x-swagger-router-controller: "swagger_server.controllers.item_controller"
definitions:
  Store:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Store Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
    example:
      id: 1
      status: "active"
  Item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Item Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
    example:
      id: 1
      status: "active"
